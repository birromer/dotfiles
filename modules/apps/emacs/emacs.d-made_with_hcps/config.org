#+TITLE: Emacs Configuration
#+AUTHOR: Bernardo Hummes
#+EMAIL: hummes@ieee.org
#+OPTIONS: toc:nil num:nil

* Configure =use-package=
  
I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

    (setq load-prefer-newer t)
#+end_src


* Prettyness
** Definitions

The default interface is filled with garbage that wastes screen space, so just remove it all

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq indent-tabs-mode nil
        tab-width 4)

  (setq inhibit-startup-screen t
        initial-scratch-message ""
        initial-major-mode 'org-mode)

  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Font
Fonts cuz yes

#+BEGIN_SRC emacs-lisp :tangle no
  (setq default-frame-alist '((font . "Inconsolata-12")))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  ;; (use-package manoj-dark 
  ;;   :demand
  ;;   :config
  ;;   ;;(load-theme 'gruvbox-dark-soft t))
  ;;   )
    (load-theme 'manoj-dark t)
#+END_SRC
** Numbers and scrolling

A bit for line numbering 

#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'relative
                display-line-numbers-width-start 4)

  (global-display-line-numbers-mode)
#+END_SRC

Improved scrolling and highlight

#+BEGIN_SRC emacs-lisp
  (setq auto-window-vscroll nil
        scroll-step 1
        scroll-conservatively most-positive-fixnum
        scroll-margin 10)

  (global-hl-line-mode 1)
#+END_SRC
** Mode line
Nice stuff for it

#+BEGIN_SRC emacs-lisp
  (setq-default display-time-format "%H:%M "
                display-time-default-load-average nil)

  (display-time-mode 1)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+END_SRC
* Emacs extensions
All the stuff that I use that alter the way Emacs works

** =general=

#+BEGIN_SRC emacs-lisp
(use-package general
  :demand
  :preface
  (defconst leader-key "SPC"
    "Leader key for some special commands.")
  :config
  (general-def
   :states '(normal visual)
   :prefix leader-key
   "" nil))
#+END_SRC

** =evil-mode=

#+begin_src emacs-lisp
(setq evil-want-abbrev-expand-on-insert-exit nil)
#+end_src

Use =evil=.

#+begin_src emacs-lisp
(use-package evil
  :demand
  :config
  (evil-mode 1))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil)
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

Use =evil= with Org agendas.

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Mode line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :demand
  :custom
  (sml/no-confirm-load-theme t)
  :config
  (sml/setup))
#+END_SRC

** Completion system

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :demand
  :custom
  (ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (ivy-initial-inputs-alist nil)
  :config
  (ivy-mode 1))

(use-package counsel
  :demand
  :ensure smex
  :after ivy
  :preface
  (defun override-yank-pop (&optional arg)
    "Delete the region before inserting popped string."
    (when (and evil-mode (eq 'visual evil-state))
      (kill-region (region-beginning) (region-end))))
  :init
  (advice-add 'counsel-yank-pop :before #'override-yank-pop)
  :general
  (:states '(normal visual)
   :prefix leader-key
   "f f" 'counsel-find-file
   "b" 'counsel-switch-buffer
   "r" 'counsel-recentf
   "y" 'counsel-yank-pop
   "m p" 'counsel-package
   "m b" 'counsel-bookmark)
  ("M-x" 'counsel-M-x))
#+END_SRC

* Programming languages support
** Org 
  #+BEGIN_SRC emacs-lisp
  (use-package org
    :hook
    ((org-mode . turn-on-auto-fill) ;; auto break line
     (org-mode . org-indent-mode)) 
    :custom
    (org-hide-leading-starts t)
    (org-modules (append org-modules '(org-tempo ox-extra)))
    (org-edit-src-content-indentation 0)
    )
  #+END_SRC 
** C++
Defaults for the language

#+BEGIN_SRC emacs-lisp
  (defun c-mode-defauults ()
    (setq c-defaults-style "linux"
          c-basic-offset 4)
    (c-set-offset 'substatement-open 0))

  (add-hook 'c-mode-common-hook (lambda () (run-hooks 'c-mode-defaults-hook)))
#+END_SRC



