+TITLE: doom emacs configuration
#+AUTHOR: Bernardo Hummes
#+EMAIL: hummes@ieee.org
#+LANGUAGE: en
#+STARTUP: inlineimages toc:2

* Introduction
aaa
* Core configuration
** Personal information
#+begin_src emacs-lisp
  (setq user-full-name "Bernardo Hummes Flores"
        user-mail-address "hummes@ieee.org")
;;  (setq user-full-name "BHF")
#+end_src

** Font
#+begin_src emacs-lisp
;;  (setq doom-font (font-spec :family "Source Code Pro" :size 14))
  (setq doom-font (font-spec :family "Mononoki" :size 14))
;;  (setq doom-font (font-spec :family "Inconsolata" :size 16))
#+end_src

** Theme and aesthetics
#+begin_src emacs-lisp
  ;(setq doom-theme 'doom-dracula)
  ;(setq doom-theme 'doom-laserwave)
  (setq doom-theme 'doom-acario-dark)
#+end_src

#+begin_src emacs-lisp
(setq doom-modeline-icon nil)
#+end_src

** Editing
Tab length
#+begin_src emacs-lisp
(setq default-tab-width 2)
(custom-set-variables '(tab-width 2))
#+end_src

Increase undo limit and make it save smaller chunks
#+begin_src emacs-lisp
(setq undo-limit 80000000
      evil-want-fine-undo t)
#+end_src

Line numbering
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Highlight trailing whitespace
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
#+end_src

** Default programs
#+begin_src emacs-lisp
(setq +latex-viewers '(zathura))
#+end_src

* Packages
** Company
#+begin_src emacs-lisp
;;(use-package company
;;  :config
;;  (define-key company-active-map (kbd "<return>") nil)
;;  (define-key company-active-map (kbd "RET") nil)
;;  (define-key company-active-map (kbd "C-SPC") #'company-complete-selection))
#+end_src

** helm
#+begin_src emacs-lisp
;;(use-package helm
;;    :config
;;    (setq helm-M-x-fuzzy-match t
;;          helm-apropos-fuzzy-match t
;;          helm-buffers-fuzzy-matching t
;;          helm-semantic-fuzzy-matching t
;;          helm-sessions-fuzzy-matching t
;;          helm-locate-fuzzy-matching t
;;          helm-imenu-fuzzy-match t
;;          helm-recentf-fuzzy-match t))
#+end_src

** helm-bibtex
Bibliography file location
#+begin_src emacs-lisp
  (setq bibtex-completion-bibliography
        '("~/mega/org/library.bib"
          ))

  (setq bibtex-completion-pdf-field "File")
#+end_src

Keybindings
#+begin_src emacs-lisp
  (map! :leader
      :prefix "o"
      :desc "helm-bibtex" "b" #'helm-bibtex)
#+end_src

** ivy-bibtex
No longer used, replaced with helm

Initial configuration
#+begin_src emacs-lisp
;;  (setq ivy-use-virtual-buffers t)
#+end_src

Keybindings
#+begin_src emacs-lisp
;;  (after! ivy-bibtex
;;      (map! :leader
;;          :prefix "i"
;;          :desc "ivy-bibtex" "l" #'ivy-bibtex))
#+end_src

** ox-jekyll-lite
This is a package for converting org files into markdown posts for jekyll
#+begin_src emacs-lisp
(setq org-jekyll-project-root "~/Documents/birromer.github.io/")
#+end_src

** ox-latex
Latex org exporter
#+begin_src emacs-lisp
(use-package ox-latex
  :after ox :after org
  :custom
  (org-latex-image-default-width "1\\linewidth")
  (org-latex-packages-alist
   `((,(concat "cache=false,outputdir=" org-export-default-output-folder)
      "minted") ("T1" "fontenc") ("" "placeins")))
  (org-latex-listings 'minted)
  (org-latex-minted-options '(("breaklines") ("breakafter" "d") ("linenos"
                                                                 "true") ("xleftmargin" "\\parindent")))
  (org-latex-pdf-process '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"))
                                        ;  (org-latex-pdf-process  '("latexmk -pdfxelatex='xelatex -shell-escape -interaction=nonstopmode' -f -xelatex -outdir=%o %f"  "latexmk -pdfxelatex='xelatex -shell-escape -interaction=nonstopmode' -f -xelatex -outdir=%o %f"  "latexmk -pdfxelatex='xelatex -shell-escape -interaction=nonstopmode' -f -xelatex -outdir=%o %f"))
  :config
  (add-to-list
   'org-latex-classes
   '("iiufrgs" "\\documentclass{iiufrgs}" ("\\chapter{%s}" .
                                           "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" .
                                           "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                           ("\\paragraph{%s}" . "\\paragraph*{%s}"))) (add-to-list 'org-latex-classes
   '("newlfm" "\\documentclass{newlfm}" ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" .
                                           "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes '("if-beamer" "\\documentclass{if-beamer}"
                                    ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" .
                                                                                "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("mimosis"
                 "\\documentclass{mimosis}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                 ("\\chapter{%s}" . "\\addchap{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes '("IEEEtran"
                                    "\\documentclass{IEEEtran}" ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" .
                                                                                "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
                                        ;(add-to-list
                                        ; 'org-structure-template-alist ; '(,"B" ;"#+TITLE: ;,#+AUTHOR: ;,#+EMAIL:
                                        ;,#+DATE: \\today ;,#+DESCRIPTION: ;,#+KEYWORDS: ;,#+LANGUAGE: en
                                        ;,#+LaTeX_HEADER: \\institute[short]{long}

                                        ;,#+STARTUP: beamer ,#+STARTUP: oddeven ,#+STARTUP: latexpreview

                                        ;,#+LaTeX_CLASS: beamer ,#+LaTeX_CLASS_OPTIONS: [bigger]
                                        ;,#+latex_class_options: [9pt]

                                        ;,#+BEAMER_THEME: Frankfurt

                                        ;,#+OPTIONS: H:2 toc:t

                                        ;,#+SELECT_TAGS: export ,#+EXCLUDE_TAGS: noexport

                                        ;,#+latex_header: \\usepackage{amsmath} ,#+latex_header:
                                        ;\\usepackage{amsfonts} ,#+latex_header: \\usepackage{amssymb}

                                        ;,#+latex_header: \\useinnertheme[shadow=false]{rounded} ,#+latex_header:
                                        ;\\usecolortheme{orchid} ,#+begin_src latex ,\\setbeamertemplate{footline} ,{
                                        ;, \\leavevmode% , \\hbox{% ,
                                        ;\\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=1.55ex,dp=1ex,center]{author
                                        ;in head/foot}% , \\usebeamerfont{author in head/foot}\\insertshortauthor ,
                                        ;\\end{beamercolorbox}% ,
                                        ;\\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=1.55ex,dp=1ex,center]{title
                                        ;in head/foot}% , \\usebeamerfont{title in head/foot}\\insertshorttitle ,
                                        ;\\end{beamercolorbox}% ,
                                        ;\\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=1.55ex,dp=1ex,right]{date
                                        ;in head/foot}% , \\usebeamerfont{institute in
                                        ;head/foot}\\insertshortinstitute{}\\hspace*{2em} , \\insertframenumber{} /
                                        ;\\inserttotalframenumber\\hspace*{2ex} , \\end{beamercolorbox}}% ,
                                        ;\\vskip0pt% ,} ,,#+end_src


                                        ;,,* Emacs setup :noexport: ,# Local Variables: ,# eval: (add-to-list
                                        ;'load-path ".") ,# eval: (indent-tabs-mode nil) ,# eval: (tab-width 4) ,#
                                        ;eval: (fill-column 70) ,# eval: (sentence-end-double-space t) ,# eval:
                                        ;(org-edit-src-content-indentation 0) ,# eval: (org-adapt-indentation nil) ,#
                                        ;eval: (org-list-two-spaces-after-bullet-regexp nil) ,# eval:
                                        ;(org-list-description-max-indent 5) ,# eval: (org-blank-before-new-entry
                                        ;'((heading . auto) (plain-list-item . auto))) ,# eval: (set-input-method
                                        ;'TeX) ,# eval: (org-pretty-entities t) ,# End:\n\n? "))
#+end_src

Export latex to pdf
#+begin_src emacs-lisp
  (map! :leader
        :prefix "c"
        :desc "org-latex-export-to-pdf" "p" #'org-latex-export-to-pdf)
#+end_src

Export beamer to pdf
#+begin_src emacs-lisp
  (map! :leader
        :prefix "c"
        :desc "org-beamer-export-to-pdf" "b" #'org-beamer-export-to-pdf)
#+end_src

Quick latex snippet preview
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-g") 'org-preview-latex-fragment)
#+end_src

Ingnore headlines
#+begin_src emacs-lisp
  (use-package! ox-extra
    :after org
    :config
    (ox-extras-activate '(ignore-headlines)))
#+end_src

Make UNNUMBERED headers export as =\*section{}=
#+begin_src emacs-lisp
(advice-add 'org-export-numbered-headline-p :around
            (lambda (orig headline info)
              (and (funcall orig headline info)
                   (not (org-element-property :UNNUMBERED headline)))))
#+end_src

Template for creating presentations
#+begin_src emacs-lisp

#+end_src

** ROS
;;#+begin_src emacs-lisp
;;  (add-to-list 'load-path "/opt/ros/melodic/share/emacs/site-lisp")
;;  (require 'rosemacs-config)
;;#+end_src
;;
;;catkin_make and compilation stuff
;;#+begin_src emacs-lisp
;;  ;; run catkin_make
;;  (defun ros-catkin-make (dir)
;;    "Run catkin_make command in DIR."
;;    (interactive (list (read-directory-name "Directory: ")))
;;    (let* ((default-directory dir)
;;           (compilation-buffer-name-function (lambda (major-mode-name) "*catkin_make*")))
;;      (compile "catkin_make"))
;;    )
;;#+end_src
;;
;;#+begin_src emacs-lisp
;;  ;; generate compile_commands.json
;;  (defun ros-catkin-make-json (dir)
;;    "Run catkin_make command in DIR."
;;    (interactive (list (read-directory-name "Directory: ")))
;;    (let* ((default-directory dir)
;;           (compilation-buffer-name-function (lambda (major-mode-name) "*catkin_make*")))
;;      (compile "catkin_make -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ."))
;;    )
;;#+end_src
;;
;;Debugging
;;#+begin_src emacs-lisp
;;  (defun ros-catkin-make-debug (dir)
;;    "Run catkin_make with Debug mode in DIR."
;;    (interactive (list (read-directory-name "Directory: ")))
;;    (let* ((default-directory dir)
;;           (compilation-buffer-name-function (lambda (major-mode-name) "*catkin_make*")))
;;      (compile "catkin_make -DCMAKE_BUILD_TYPE=Debug"))
;;    )
;;#+end_src
;;
;;Some keybindings
;;#+begin_src emacs-lisp
;;(global-set-key (kbd "C-x C-r M") 'ros-catkin-make)
;;(global-set-key (kbd "C-x C-r C-j") 'ros-catkin-make-json)
;;#+end_src

**

** Hypothesis
Set user variables
#+begin_src emacs-lisp
  (setq hypothesis-username "birromer")
  (setq hypothesis-token "6879-kTl5hR8KRzyVYL5u78DzJdD0Rt0wx0EIpcPHQdmW2y0")
#+end_src

Set file where to import the data, synced inside org-roam
#+begin_src emacs-lisp
  (setq hypothesis-archive "~/mega/org/roam/20211109230343-hypothesis_archive.org")
#+end_src

** esup
Having problems with startup time, gotta trim
#+begin_src emacs-lisp
;;  (use-package esup
;;    ;; To use MELPA Stable use ":pin melpa-stable",
;;    :pin melpa)
#+end_src

#+begin_src emacs-lisp
;;  (use-package benchmark-init
;;    :config
;;    ;; To disable collection of benchmark data after init is done.
;;    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

* File modes
** Org
*** Base directory
#+begin_src emacs-lisp
  (setq org-directory "~/mega/org/")
#+end_src

*** Aesthetics
#+begin_src emacs-lisp
  (setq org-startup-folded t)
  (setq org-startup-indented t)
  (setq org-fontify-done-headline t)
  (setq org-fontify-todo-headline t)
  (setq org-src-fontify-natively t)
#+end_src

*** Structure templates
#+begin_src emacs-lisp
(use-package org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("th" . "theorem"))
  (add-to-list 'org-structure-template-alist '("de" . "definition"))
  (add-to-list 'org-structure-template-alist '("re" . "remark"))
  (add-to-list 'org-structure-template-alist '("pr" . "proof"))
  (add-to-list 'org-structure-template-alist '("le" . "lemma"))
  (add-to-list 'org-structure-template-alist '("pro" . "proposition"))
)
#+end_src

*** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

#+begin_src emacs-lisp
  (use-package org-superstar  ;; improved bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

*** org-fancy-priorities
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("+" "+" "+")))
#+end_src

*** org-agenda
Base agenda
#+begin_src emacs-lisp
(setq org-log-done t)
(setq org-agenda-file '("~/mega/org/todo.org"))
;; "~/mega/org/notes.org"
#+end_src

TODO options
#+begin_src emacs-lisp
(after! org
    (setq org-todo-keywords '((sequence "TODO(t)" "OPEN(o)" "START(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "CLOSED(c)" "DONE(d)" "KILLED(k)")
                              (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[x](D)"))
  ))
#+end_src

Priorities
#+begin_src emacs-lisp
(after! org
  (setq org-priority-faces '((65 :foreground "#e45649")
                             (66 :foreground "#da8548")
                             (67 :foreground "#0098dd"))))
#+end_src

Super agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)
(setq org-agenda-files "~/mega/org/todo.org")
;;                       "~/mega/org/roam/")
;;                       "~/mega/org/")
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 1)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Work"
                           :tag  "Work"
                           :order 3)
                          (:name "Dissertation"
                           :tag "Dissertation"
                           :order 7)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Essay 1"
                           :tag "Essay1"
                           :order 2)
                          (:name "Reading List"
                           :tag "Read"
                           :order 8)
                          (:name "Work In Progress"
                           :tag "WIP"
                           :order 5)
                          (:name "Blog"
                           :tag "Blog"
                           :order 12)
                          (:name "Essay 2"
                           :tag "Essay2"
                           :order 3)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
#+end_src

*** org-journal
Change format of the dates and folder
#+begin_src emacs-lisp
  (use-package org-journal
    :bind
    ("C-c n j" . org-journal-new-entry)
    :custom
    (org-journal-dir "~/mega/org/roam/daily/")
    (org-journal-time-prefix "* ")
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-date-format "%A, %d %m %Y"))
  (setq org-journal-enable-agenda-integration t)
#+end_src

*** org-ref
#+begin_src emacs-lisp
(use-package! org-ref
    :after org
    :preface
    (defconst birromer/user-org-ref-path
      (expand-file-name "~/mega/org/"))
    :custom
    (org-ref-bibliography-notes "~/mega/org/notes.org")
    (org-ref-default-bibliography '("~/mega/org/library.bib"))
    (reftex-default-bibliography '("~/mega/org/library.bib"))
    (org-ref-completion-library 'org-ref-cite-insert-helm)
    (org-ref-insert-cite-function 'org-ref-cite-insert-helm)
    (org-ref-insert-label-function 'org-ref-cite-insert-helm)
    (org-ref-insert-ref-function 'org-ref-cite-insert-helm)
    (org-ref-show-broken-links nil)
    (org-ref-notes-directory birromer/user-org-ref-path)

    :init
    :general
    (:states '(normal visual)
     :keymaps 'org-mode-map
     :prefix "m"
     "m c" 'org-ref-cite-hydra/body)
    :config
    (require 'doi-utils)
    )

  (map! :leader
        :prefix "i"
        :desc "insert citation link" "l" #'org-ref-insert-link)
#+end_src

#+begin_src emacs-lisp
  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-helm
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

  (setq org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-src-preserve-identation t)


  (setq bibtex-completion-bibliography '("~/mega/org/library.bib")
 ;       bibtex-completion-library-path '("~/Dropbox/emacs/bibliography/bibtex-pdfs/")
        bibtex-completion-pdf-field "File"
        bibtex-completion-notes-path "~/mega/org/notes.org"
        bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

        bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
       bibtex-completion-pdf-open-function
       (lambda (fpath)
         (call-process "open" nil 0 nil fpath)))

#+end_src

*** toc-org
#+begin_src emacs-lisp
(use-package! toc-org
  :defer t
  :hook
  (org-mode-hook . toc-org-mode))
#+end_src

*** org-roam
Base directory
#+begin_src emacs-lisp
  (setq org-roam-directory "~/mega/org/roam/")
#+end_src

Keybindings and templates
#+begin_src emacs-lisp
  (after! org-roam
      (map! :leader
          :prefix "n"
          :desc "org-roam" "l" #'org-roam
          :desc "org-roam-node-insert" "i" #'org-roam-node-insert
          :desc "org-roam-node-find" "f" #'org-roam-node-find
          :desc "org-roam-buffer-toggle" "b" #'org-roam-buffer-toggle
          :desc "org-roam-graph" "g" #'org-roam-graph
          :desc "org-roam-capture-today" "N" #'org-roam-dailies-capture-today
          :desc "org-roam-capture" "c" #'org-roam-capture)
      (setq org-roam-capture-templates
      '(("n" "note" plain
         "%?"
         :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n\n - tags :: \n\n* Notes ")
         :immediate-finish t
         :unnarrowed t)
        ("i" "idea" plain "%?"
         :if-new
         (file+head "main/${title}.org"
                    "#+title: ${title}\n\n - tags :: [[id:1b509a50-16cd-4389-b904-3b440678e544][idea]] \n\n* Cues \n- \n\n* Notes ")
         :immediate-finish t
         :unnarrowed t)
        ("d" "doctorat" plain "%?"
         :if-new
         (file+head "phd/${title}.org"
                    "#+title: ${title}\n\n - tags :: [[id:03fca6b0-30c2-4825-a439-b130759a6160][phd]] \n- related work :: \n\n* Notes ")
         :immediate-finish t
         :unnarrowed t)
        ("p" "person" plain "%?"
         :if-new
         (file+head "main/${title}.org"
                    "#+name: ${title}\nPhone: \nEmail: \nAddress: \nOccupation: \nBirthday: \nHow did we meet: \n\n- tags :: [[id:d6760fca-d74a-4513-b5f9-e942933a8ccc][person]] \n\n* Notes ")
         :immediate-finish t
         :unnarrowed t)
        ("m" "meeting" plain "%?"
         :if-new
         (file+head "main/${title}.org"
                    "#+topic: ${title}\n#+date: %t\n- attendees :: \n- tags :: [[id:aa9c4808-810f-420f-a706-f3f922ecb444][meeting]] \n\n* Agenda \n 1. \n\n* Notes\n")
         :immediate-finish t
         :unnarrowed t)
        ("r" "reference" plain "%?"
         :if-new
         (file+head "reference/${title}.org"
                    "#+title: ${title}\n- tags :: \n- related work :: \n\n* Notes\n\n")
         :immediate-finish t
         :unnarrowed t)
        ("a" "article" plain "%?"
         :if-new
         (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
         :immediate-finish t
         :unnarrowed t)))
      )
#+end_src


Dailies
#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "~/mega/org/roam/daily/")
#+end_src

Completion
#+begin_src emacs-lisp
  (require 'company-org-roam)
  (use-package company-org-roam
    :when (featurep! :completion company)
    :after org-roam :config
    (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+end_src

Note searching
#+begin_src emacs-lisp
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/mega/org/roam/"
      "~/mega/org/roam/daily/"))
#+end_src


Bibtex integration
#+begin_src emacs-lisp
  (use-package! org-roam-bibtex
    :load-path "~/mega/org/library.bib"
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
           (("C-c n a" . orb-note-actions))))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point) ""
           :file-name "${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n" ; <--
           :unnarrowed t)))
  (setq orb-preformat-keywords '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))

  (setq orb-templates
        '(("n" "ref+noter" plain (function org-roam-capture--get-point)
           ""
           :file-name "reference/${slug}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS:

  - tags ::
  - keywords :: ${keywords}
  \* ${title}
  :PROPERTIES:
  :Custom_ID: ${citekey}
  :URL: ${url}
  :AUTHOR: ${author-or-editor}
  :NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
  :NOTER_PAGE:
  :END:")))
#+end_src

** Org-roam-ui
Ok apparently I can have a nice interface for visualizing the graph

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** YAML
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
#+end_src

** LaTeX
** C++
** C
** Rust
** Shell script
** Python
Disable flycheck with pylint
#+begin_src emacs-lisp
(setq-default flycheck-disable-checkers '(python-pylint))
#+end_src

** CMake
